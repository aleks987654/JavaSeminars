Внутри класса MergeSort напишите метод mergeSort,
который принимает массив целых чисел,
реализует алгоритм сортировки слиянием.
Метод должен возвращать отсортированный массив.

Пример


a = {5, 1, 6, 2, 3, 4} -> [1, 2, 3, 4, 5, 6]

Подсказка № 1
Решение должно состоять из двух методов:
mergeSort, разделяющего исходный массив на части и
второго метода, который формирует новый, отсортированный массив.


import java.util.Arrays;

class MergeSort {
    public static int[] mergeSort(int[] a) {
        // Напишите свое решение ниже
      mSort(a, 0, a.length - 1);
        return a;
    }


    private static void mSort(int[] array, int left, int right) {
        if (left < right) {
            // Находим середину массива
            int middle = (left + right) / 2;

            // Рекурсивно вызываем функцию для левой половины массива
            mSort(array, left, middle);

            // Рекурсивно вызываем функцию для правой половины массива
            mSort(array, middle + 1, right);

            // Сливаем две отсортированные половины
            merge(array, left, middle, right);
        }
    }

    // Функция для слияния двух отсортированных частей массива
    private static void merge(int[] array, int left, int middle, int right) {
        // Создаем временный массив для хранения результатов слияния
        int[] tempArray = new int[right - left + 1];

        // Индексы для левой и правой частей массива
        int leftIndex = left;
        int rightIndex = middle + 1;

        // Индекс для временного массива
        int k = 0;

        while (leftIndex <= middle && rightIndex <= right) {
            if (array[leftIndex] <= array[rightIndex]) {
                tempArray[k++] = array[leftIndex++];
            } else {
                tempArray[k++] = array[rightIndex++];
            }
        }

        // Копируем оставшиеся элементы из левой части
        while (leftIndex <= middle) {
            tempArray[k++] = array[leftIndex++];
        }

        // Копируем оставшиеся элементы из правой части
        while (rightIndex <= right) {
            tempArray[k++] = array[rightIndex++];
        }

        // Копируем отсортированный временный массив обратно в исходный массив
        for (int i = 0; i < tempArray.length; i++) {
            array[left + i] = tempArray[i];
        }
    }
}

// Не удаляйте этот класс - он нужен для вывода результатов на экран и проверки
public class Printer{
    public static void main(String[] args) {
        int[] a;

        if (args.length == 0) {
        // При отправке кода на Выполнение, вы можете варьировать эти параметры
            a = new int[]{5, 1, 6, 2, 3, 4};
        } else {
            a = Arrays.stream(args[0].split(", ")).mapToInt(Integer::parseInt).toArray();
        }

        MergeSort answer = new MergeSort();
        String itresume_res = Arrays.toString(answer.mergeSort(a));
        System.out.println(itresume_res);
    }
}